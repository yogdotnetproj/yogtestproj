AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  GitHubConnectionArn: 
    Type: String
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  EKSClusterName:
    Type: String
  ECRRepoName: 
    Type: String

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket

  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:  ECRRepoName

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name:         "${ECRRepoName}-build"
      ServiceRole:  CodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        PrivilegedMode: true
        Image: aws/codebuild/standard:5.0
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: NO_CACHE
      TimeoutInMinutes: 30
      BuildSpec: |
        version: 0.2
        phases:
          pre_build:
            commands:
              - aws --version
              - echo Logging in to ECR...
              - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION \
                  | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com)
              - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
              - REPO_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/${ECRRepoName}
          build:
            commands:
              - echo Building Docker image...
              - docker build -t $REPO_URI:$IMAGE_TAG .
              - docker tag $REPO_URI:$IMAGE_TAG $REPO_URI:latest
          post_build:
            commands:
              - echo Pushing images...
              - docker push $REPO_URI:$IMAGE_TAG
              - docker push $REPO_URI:latest
              - printf '[{"name":"imageURI","value":"%s"}]' \
                 $REPO_URI:$IMAGE_TAG > imagedefinitions.json
        artifacts:
          files:
            - imagedefinitions.json

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEKS_CICD_Policy

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name:  "${ECRRepoName}-pipeline"
      RoleArn:  PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location:  ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn:  GitHubConnectionArn
                FullRepositoryId:  GitHubRepo
                BranchName:  GitHubBranch
                Output: SourceOutput
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName:  CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployToEKS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: EKS
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName:  EKSClusterName
                FileName: imagedefinitions.json

Outputs:
  PipelineName:
    Value:  CodePipeline
  ECRRepositoryUri:
    Value:  ECRRepo.RepositoryUri
